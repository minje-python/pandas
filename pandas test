import pandas as pd

odd = [1, 3, 5, 7, 9]
odd

odd = pd.Series(odd)
odd

odd = [1,3,5,7,9]
odd.mean()

odd = pd.Series(odd)
odd.mean()

numbers = [
    [1,2,3],
    [4,5,6],
    [7,8,9]
]
numbers

numbers = pd.DataFrame(numbers)
numbers

print(type(numbers))

print(type(numbers[0]))

print(type(numbers.loc[0]))

transaction = [
    ["2017-01-01", 500, "confirmed"],
    ["2017-01-03", 700, "confirmed"],
    ["2017-01-10", 200, "canceled"]
]
pd.DataFrame(transaction)

pd.DataFrame(transaction, columns = ["date", "price", "state"])

transaction = {
    "date" : ["2017-01-01", "2017-01-03", "2017-01-10"],
    "price" : [500, 700, 200],
    "state" : ["confirmed", "confirmed", "canceled"]
}
pd.DataFrame(transaction)

transaction = [
    {"date": "2017-01-01", "price" : 500, "state" : "confirmed"},
    {"date": "2017-01-03", "price" : 700, "state" : "confirmed"},
    {"date": "2017-01-10", "price" : 200, "state" : "canceled"},
]
pd.DataFrame(transaction)

포켓몬 데이터 실습

path_file = "data/pokemon.csv"

data = pd.read_csv(path_file, index_col = "name")

data

data[0:31]

pd.options.display.max_columns = 30
# colunms = 세로줄(열) , rows = 가로줄(행)
# 출력되는 로우의 개수를 지정할 수 있다.
pd.options.display.max_rows = 100
pd.get_option("display.max_rows")

data

data.index

data.values

data.columns

data.shape

data.head()

data.head(3)

data.tail()

data.tail(7)

data["height_m"].mean()

data["height_m"].min()

data["height_m"].max()

data.describe()

data["is_legendary"] = data["is_legendary"].replace(0, "general")
data["is_legendary"] = data["is_legendary"].replace(1, "legend")
data

data["height_m(fill)"] = data["height_m"].fillna(1.16)
data

data.columns

컬럼 중 날짜 데이터가 있을 경우,
판다스의 to_datetime을 사용하여, 연/월/일을 쉽게 가져올 수 있다.
data["columns명"] = pd.to_datetime(data["columns명"])
연도(year) 데이터를 가져오고 싶으면 dt.year을 사용한다.
data["columns명"].dt.year
월(month) 데이터를 가져오고 싶으면 dt.month를 사용한다.
data["columns명"].dt.month
일(day)데이터를 가져오고 싶으면 dt.day를 사용한다.
data["columns명"].dt.day

data["japanese_name"]

data[["japanese_name","height_m","weight_kg"]].head()

columns = ["japanese_name","height_m","weight_kg"]
data[columns].head()

data["name"]

data.loc["Pikachu"]

data.loc["Squirtle" : "Pikachu"]

data.reindex(["Pikachu", "Squirtle", "Charmander"])

pokemon_names = ["Pikachu", "Squirtle", "Charmander"]
data.reindex(pokemon_names)

data.loc["Pikachu", "generation"]

data.loc["Pikachu",["generation","pokedex_number"]]

data.loc[["Pikachu","Squirtle","Charmander"],"generation"]

data.loc["Squirtle":"Pikachu","generation"]

data.loc["Squirtle" : "Pikachu", ["generation","pokedex_number"]]

pd.options.display.max_rows = 40
data["generation"] == 1

data[data["generation"] == 1]

data[data["weight_kg"] > 75]

data[data["is_legendary"] == "legend"]

data[data["type1"] == "fire"]

data[data["type1"] == "Fire"]

data[data["type1"].isin(["fire","grass"])]

type_list = ["fire","grass"]
type_isin = data["type1"].isin(type_list)

data[type_isin].head()

p_contains = data["japanese_name"].str.contains("P")
data[p_contains]

null_weight = data["weight_kg"].isnull()
data[null_weight]

weight_exists = data["weight_kg"].notnull()
data[weight_exists]

null_weight = ~data["weight_kg"].notnull() # '~'은 반대 notnull의 반대인 isnull 결과 값이 나옴.
data[null_weight].head()

data[data["weight_kg"] > 75.5 and data["type1"] == "grass"]

data[data["weight_kg"] > 75.5 & data["type1"] == "grass"]

data[(data["weight_kg"] > 75.5) & (data["type1"] == "grass")]

high_weight = data["weight_kg"] > 75.5
type_grass = data["type1"] == "grass"

data[high_weight & type_grass]

data[high_weight | type_grass]

data.loc[data["is_legendary"] == "legend", "attack"]

data.loc[data["is_legendary"]=="legend",["attack","defense","hp"]].head()

pd.pivot_table(data,index="is_legendary",values="attack")

pd.pivot_table(data,index=["generation","is_legendary"],values=["attack","defense"])

import numpy as np

pd.pivot_table(data,index=["generation","is_legendary"],values="attack",aggfunc=np.sum)

data.index

data.columns

data["height_m(fill)"] = True
data[["height_m(fill)"]]

data["id"] = range(1,802)
data[["id"]]

data.columns

data["weight_gram"] = data["weight_kg"] * 100
data[["weight_kg","weight_gram"]].head()

data["height_m"]

data["is_tall"] = data["height_m"] > 3
data[["height_m","is_tall"]].tail()

data.loc[data["height_m"] > 3, "height_state"] = "tall"
data.loc[data["height_m"] <= 3, "height_state"] = "small"
data[["height_m","is_tall","height_state"]]

data["height_m"] < 1

data[data["height_m"] >= 2]
data.loc[data["height_m"] >= 2, "height_state"] = "tall"
data[["height_m","height_state"]]

data.loc[data["height_m"] < 1, "height_state"] = "small"
data.loc[(data["height_m"] >= 1) & (data["height_m"] < 2),"height_state"] = "normal"
data.loc[data["height_m"] >= 2, "height_state"] = "tall"

data[["height_m","height_state"]]

data.loc[data["height_m"].isnull(),"height_state"] = np.nan

data[["height_m","height_state"]].head(20)

data.columns

columns = ['japanese_name','height_m','weight_kg','type1','type2','is_legendary',
          'generation','pokedex_number','hp','attack','defense','speed','experience_growth','base_happiness']
data = data[columns]
data

pd.options.display.max_rows = 100
data

data.drop("hp",axis=1)

data

data.drop(["weight_kg","speed"], axis=1)

def band_height(height_m):
    if pd.isnull(height_m):
        return np.nan
    
    if height_m < 1:
        return "small"
    
    elif height_m >= 1 and height_m < 2:
        return "normal"
    
    else:
        return "tall"

data["height_state"] = data["height_m"].apply(band_height)
data[["height_m","height_state"]]

data.to_csv("data/pokemon_pandas.csv")

pd.read_csv("data/pokemon_pandas.csv")

